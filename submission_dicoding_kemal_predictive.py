# -*- coding: utf-8 -*-
"""Submission Dicoding Kemal_Predictive.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16DiMBW4U0Qu8oEHsgyEMVYmlYw5kvd10

# Proyek Predictive Analytics: Apple Quality
---


- **Nama:** Kemal Aziz
- **Email:** kemal.aziz03@gmail.com
- **ID Dicoding:** kstarid

## Import Semua Packages/Library yang Digunakan
"""

# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import accuracy_score, f1_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.impute import SimpleImputer

# Mengunggah kredensial Kaggle
from google.colab import files
files.upload()  # Unggah file kaggle.json yang Anda dapatkan dari akun Kaggle Anda

# Membuat direktori .kaggle dan memindahkan file kaggle.json
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Unduh dataset
!kaggle datasets download -d nelgiriyewithana/apple-quality

# Ekstrak file ZIP
!unzip apple-quality.zip -d apple-quality

df = pd.read_csv('/content/apple-quality/apple_quality.csv', skipfooter=1, engine='python')
df.info()
df.describe()

"""# Data Exploration"""

# Drop A_id column as it's just an identifier
df = df.drop('A_id', axis=1)

df.head()

# Check the distribution of the target variable
print("\n--- Target Variable Distribution ---")
print(df['Quality'].value_counts())
print(df['Quality'].value_counts(normalize=True) * 100)

# Visualize the distribution of the target variable
plt.figure(figsize=(8, 6))
sns.countplot(x='Quality', data=df)
plt.title('Distribution of Apple Quality')
plt.xlabel('Quality')
plt.ylabel('Count')
plt.show()
plt.close()

# Visualize feature distributions by quality
plt.figure(figsize=(15, 10))
for i, column in enumerate(df.columns[:-1]):
    plt.subplot(3, 3, i+1)
    sns.boxplot(x='Quality', y=column, data=df)
    plt.title(f'{column} by Quality')
plt.tight_layout()
plt.show()
plt.close()

"""# Pre-Processing"""

# Prepare data for modeling
print("\n--- Preparing Data for Modeling ---")
X = df.drop('Quality', axis=1)
y = df['Quality']

# Convert target to binary (0 for 'bad', 1 for 'good')
y = y.map({'bad': 0, 'good': 1})

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Training set size: {X_train.shape}")
print(f"Testing set size: {X_test.shape}")

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""# Modelling"""

# Train a Random Forest model
print("\n--- Training Random Forest Model ---")
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train_scaled, y_train)

# Make predictions
y_pred = rf_model.predict(X_test_scaled)

"""# Evaluation"""

# Evaluate the model
print("\n--- Model Evaluation ---")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nConfusion Matrix:")
cm = confusion_matrix(y_test, y_pred)
print(cm)

# Visualize confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Bad', 'Good'], yticklabels=['Bad', 'Good'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()
plt.close()

# Feature importance
feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Importance': rf_model.feature_importances_
}).sort_values('Importance', ascending=False)

print("\n--- Feature Importance ---")
print(feature_importance)

# Visualize feature importance
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance)
plt.title('Feature Importance')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.show()
plt.close()

"""# HyperTuning"""

# Hyperparameter tuning with GridSearchCV
print("\n--- Hyperparameter Tuning ---")
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(
    estimator=RandomForestClassifier(random_state=42),
    param_grid=param_grid,
    cv=5,
    n_jobs=-1,
    verbose=1,
    scoring='accuracy'
)

grid_search.fit(X_train_scaled, y_train)

print("\nBest parameters:", grid_search.best_params_)
print("Best cross-validation score:", grid_search.best_score_)

# Train the model with the best parameters
best_rf_model = grid_search.best_estimator_
best_rf_model.fit(X_train_scaled, y_train)

# Make predictions with the best model
best_y_pred = best_rf_model.predict(X_test_scaled)

# Evaluate the best model
print("\n--- Best Model Evaluation ---")
print("Accuracy:", accuracy_score(y_test, best_y_pred))
print("\nClassification Report:")
print(classification_report(y_test, best_y_pred))

print("\nConfusion Matrix:")
best_cm = confusion_matrix(y_test, best_y_pred)
print(best_cm)

# Visualize confusion matrix for the best model
plt.figure(figsize=(8, 6))
sns.heatmap(best_cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Bad', 'Good'], yticklabels=['Bad', 'Good'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix (Best Model)')
plt.show()
plt.close()